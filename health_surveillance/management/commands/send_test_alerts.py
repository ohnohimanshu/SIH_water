"""
Management command to send test alerts.
"""
from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from apps.alerts.models import AlertNotification, AlertTemplate
from apps.geography.models import Village
from apps.alerts.services import AlertService
import random

User = get_user_model()


class Command(BaseCommand):
    help = 'Send test alerts to verify alert system functionality'

    def add_arguments(self, parser):
        parser.add_argument(
            '--alert-type',
            type=str,
            choices=['OUTBREAK_PREDICTED', 'WATER_CONTAMINATION', 'MULTIPLE_CASES', 'EMERGENCY'],
            default='OUTBREAK_PREDICTED',
            help='Type of alert to send'
        )
        parser.add_argument(
            '--severity',
            type=str,
            choices=['LOW', 'MEDIUM', 'HIGH', 'CRITICAL'],
            default='MEDIUM',
            help='Alert severity level'
        )
        parser.add_argument(
            '--village-id',
            type=int,
            help='Village ID to send alert for (random if not specified)'
        )

    def handle(self, *args, **options):
        self.stdout.write('Sending test alert...')

        # Get or create a test user
        test_user, created = User.objects.get_or_create(
            username='test_user',
            defaults={
                'email': 'test@example.com',
                'first_name': 'Test',
                'last_name': 'User',
                'role': 'DISTRICT_OFFICER',
                'state': 'Assam',
                'district': 'Kamrup'
            }
        )
        if created:
            test_user.set_password('testpass123')
            test_user.save()

        # Get village
        if options['village_id']:
            try:
                village = Village.objects.get(id=options['village_id'])
            except Village.DoesNotExist:
                self.stdout.write(
                    self.style.ERROR(f'Village with ID {options["village_id"]} not found')
                )
                return
        else:
            village = Village.objects.first()
            if not village:
                self.stdout.write(
                    self.style.ERROR('No villages found. Please load sample data first.')
                )
                return

        # Create test alert
        alert_data = {
            'alert_type': options['alert_type'],
            'alert_severity': options['severity'],
            'title': f'Test {options["alert_type"]} Alert',
            'message': f'This is a test alert for {options["alert_type"]} in {village.name}',
            'description': f'Test alert generated by management command for testing purposes.',
            'village': village,
            'created_by': test_user,
            'alert_data': {
                'test_alert': True,
                'generated_by': 'management_command'
            }
        }

        # Create alert notification
        alert = AlertNotification.objects.create(**alert_data)

        self.stdout.write(
            self.style.SUCCESS(
                f'Test alert created successfully!\n'
                f'Alert ID: {alert.alert_id}\n'
                f'Type: {alert.alert_type}\n'
                f'Severity: {alert.alert_severity}\n'
                f'Village: {village.name}\n'
                f'Title: {alert.title}'
            )
        )

        # Send alert through alert service
        try:
            alert_service = AlertService()
            result = alert_service.send_alert(alert)
            
            if result['success']:
                self.stdout.write(
                    self.style.SUCCESS('Alert sent successfully through AlertService!')
                )
            else:
                self.stdout.write(
                    self.style.WARNING(f'Alert created but sending failed: {result["error"]}')
                )
        except Exception as e:
            self.stdout.write(
                self.style.WARNING(f'Alert created but AlertService not available: {str(e)}')
            )

        self.stdout.write(
            f'\nYou can view this alert in the admin panel or through the API:\n'
            f'Admin: http://localhost:8000/admin/alerts/alertnotification/{alert.id}/\n'
            f'API: http://localhost:8000/api/alerts/{alert.id}/'
        )
