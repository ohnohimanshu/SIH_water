# Generated by Django 4.2.7 on 2025-09-28 02:04

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("geography", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="MLModelVersion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("model_name", models.CharField(max_length=100)),
                (
                    "model_type",
                    models.CharField(
                        choices=[
                            ("OUTBREAK_PREDICTION", "Outbreak Prediction"),
                            ("CASE_COUNT_PREDICTION", "Case Count Prediction"),
                            ("RISK_ASSESSMENT", "Risk Assessment"),
                            ("WATER_QUALITY_PREDICTION", "Water Quality Prediction"),
                            ("DISEASE_CLASSIFICATION", "Disease Classification"),
                            ("SEASONAL_TREND", "Seasonal Trend Analysis"),
                        ],
                        max_length=30,
                    ),
                ),
                ("version", models.CharField(max_length=20)),
                (
                    "model_status",
                    models.CharField(
                        choices=[
                            ("TRAINING", "Training"),
                            ("VALIDATING", "Validating"),
                            ("ACTIVE", "Active"),
                            ("DEPRECATED", "Deprecated"),
                            ("FAILED", "Failed"),
                        ],
                        default="TRAINING",
                        max_length=20,
                    ),
                ),
                ("algorithm", models.CharField(max_length=100)),
                ("model_file_path", models.CharField(max_length=500)),
                ("feature_columns", models.JSONField(default=list)),
                ("target_column", models.CharField(max_length=100)),
                ("training_data_size", models.PositiveIntegerField()),
                ("training_start_date", models.DateTimeField()),
                ("training_end_date", models.DateTimeField(blank=True, null=True)),
                (
                    "training_duration_minutes",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "accuracy",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "precision",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "recall",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "f1_score",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "auc_score",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                ("rmse", models.FloatField(blank=True, null=True)),
                ("mae", models.FloatField(blank=True, null=True)),
                ("hyperparameters", models.JSONField(default=dict)),
                ("feature_importance", models.JSONField(default=dict)),
                ("model_metadata", models.JSONField(default=dict)),
                (
                    "validation_accuracy",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "validation_data_size",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("cross_validation_scores", models.JSONField(default=list)),
                ("is_deployed", models.BooleanField(default=False)),
                ("deployment_date", models.DateTimeField(blank=True, null=True)),
                ("deployment_environment", models.CharField(blank=True, max_length=50)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_models",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "ML Model Version",
                "verbose_name_plural": "ML Model Versions",
                "db_table": "ml_model_versions",
                "ordering": ["-created_at"],
                "unique_together": {("model_name", "version")},
            },
        ),
        migrations.CreateModel(
            name="ModelTrainingJob",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("job_id", models.CharField(max_length=50, unique=True)),
                (
                    "job_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("RUNNING", "Running"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                ("training_config", models.JSONField(default=dict)),
                ("data_config", models.JSONField(default=dict)),
                ("hyperparameters", models.JSONField(default=dict)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "duration_minutes",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("cpu_usage", models.FloatField(blank=True, null=True)),
                ("memory_usage", models.FloatField(blank=True, null=True)),
                ("gpu_usage", models.FloatField(blank=True, null=True)),
                ("training_metrics", models.JSONField(default=dict)),
                ("validation_metrics", models.JSONField(default=dict)),
                ("error_logs", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="training_jobs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "model_version",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="training_jobs",
                        to="ml_models.mlmodelversion",
                    ),
                ),
            ],
            options={
                "verbose_name": "Model Training Job",
                "verbose_name_plural": "Model Training Jobs",
                "db_table": "model_training_jobs",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DataSyncLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("sync_id", models.CharField(max_length=50, unique=True)),
                (
                    "sync_type",
                    models.CharField(
                        choices=[
                            ("UPLOAD", "Upload"),
                            ("DOWNLOAD", "Download"),
                            ("BIDIRECTIONAL", "Bidirectional"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "sync_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                            ("PARTIAL", "Partial"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                ("sync_start_time", models.DateTimeField()),
                ("sync_end_time", models.DateTimeField(blank=True, null=True)),
                (
                    "duration_seconds",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("records_synced", models.PositiveIntegerField(default=0)),
                ("records_failed", models.PositiveIntegerField(default=0)),
                ("total_records", models.PositiveIntegerField(default=0)),
                ("sync_summary", models.JSONField(default=dict)),
                ("error_logs", models.TextField(blank=True)),
                ("conflict_resolution", models.JSONField(default=dict)),
                ("device_id", models.CharField(blank=True, max_length=100)),
                ("app_version", models.CharField(blank=True, max_length=20)),
                ("network_type", models.CharField(blank=True, max_length=20)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sync_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Data Sync Log",
                "verbose_name_plural": "Data Sync Logs",
                "db_table": "data_sync_logs",
                "ordering": ["-sync_start_time"],
            },
        ),
        migrations.CreateModel(
            name="RiskAssessment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("assessment_id", models.CharField(max_length=50, unique=True)),
                (
                    "assessment_type",
                    models.CharField(
                        choices=[
                            ("WATER_QUALITY", "Water Quality Risk"),
                            ("DISEASE_OUTBREAK", "Disease Outbreak Risk"),
                            ("ENVIRONMENTAL", "Environmental Risk"),
                            ("HEALTHCARE_ACCESS", "Healthcare Access Risk"),
                            ("OVERALL", "Overall Risk"),
                        ],
                        max_length=30,
                    ),
                ),
                ("assessment_date", models.DateTimeField()),
                (
                    "overall_risk_score",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ]
                    ),
                ),
                (
                    "risk_level",
                    models.CharField(
                        choices=[
                            ("LOW", "Low Risk"),
                            ("MODERATE", "Moderate Risk"),
                            ("HIGH", "High Risk"),
                            ("CRITICAL", "Critical Risk"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "water_quality_score",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "disease_history_score",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "environmental_score",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "population_density_score",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "healthcare_access_score",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "sanitation_score",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                ("risk_factors", models.JSONField(default=list)),
                ("contributing_factors", models.JSONField(default=dict)),
                ("mitigation_measures", models.JSONField(default=list)),
                ("assessment_method", models.CharField(max_length=100)),
                ("data_sources", models.JSONField(default=list)),
                (
                    "confidence_level",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ]
                    ),
                ),
                ("recommendations", models.TextField(blank=True)),
                ("priority_actions", models.JSONField(default=list)),
                ("timeline", models.CharField(blank=True, max_length=100)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="risk_assessments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "village",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="risk_assessments",
                        to="geography.village",
                    ),
                ),
            ],
            options={
                "verbose_name": "Risk Assessment",
                "verbose_name_plural": "Risk Assessments",
                "db_table": "risk_assessments",
                "ordering": ["-assessment_date"],
                "indexes": [
                    models.Index(
                        fields=["village", "assessment_date"],
                        name="risk_assess_village_23cadf_idx",
                    ),
                    models.Index(
                        fields=["overall_risk_score"],
                        name="risk_assess_overall_aee42d_idx",
                    ),
                    models.Index(
                        fields=["risk_level"], name="risk_assess_risk_le_e2dd80_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="OutbreakPrediction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("prediction_id", models.CharField(max_length=50, unique=True)),
                (
                    "prediction_type",
                    models.CharField(
                        choices=[
                            ("OUTBREAK_PROBABILITY", "Outbreak Probability"),
                            ("CASE_COUNT", "Case Count Prediction"),
                            ("SEVERITY_LEVEL", "Severity Level"),
                            ("DISEASE_TYPE", "Disease Type Prediction"),
                        ],
                        max_length=30,
                    ),
                ),
                ("prediction_date", models.DateTimeField()),
                ("prediction_period_start", models.DateField()),
                ("prediction_period_end", models.DateField()),
                (
                    "outbreak_probability",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ]
                    ),
                ),
                ("predicted_cases", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "confidence_level",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ]
                    ),
                ),
                (
                    "severity_level",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("LOW", "Low"),
                            ("MODERATE", "Moderate"),
                            ("HIGH", "High"),
                            ("CRITICAL", "Critical"),
                        ],
                        max_length=20,
                    ),
                ),
                ("input_features", models.JSONField(default=dict)),
                ("feature_contributions", models.JSONField(default=dict)),
                (
                    "water_quality_risk",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "environmental_risk",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "population_density_risk",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "historical_risk",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "seasonal_risk",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                ("is_validated", models.BooleanField(default=False)),
                ("actual_cases", models.PositiveIntegerField(blank=True, null=True)),
                ("actual_outbreak", models.BooleanField(blank=True, null=True)),
                ("prediction_accuracy", models.FloatField(blank=True, null=True)),
                ("validation_date", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "model_version",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="predictions",
                        to="ml_models.mlmodelversion",
                    ),
                ),
                (
                    "village",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="outbreak_predictions",
                        to="geography.village",
                    ),
                ),
            ],
            options={
                "verbose_name": "Outbreak Prediction",
                "verbose_name_plural": "Outbreak Predictions",
                "db_table": "outbreak_predictions",
                "ordering": ["-prediction_date"],
                "indexes": [
                    models.Index(
                        fields=["village", "prediction_date"],
                        name="outbreak_pr_village_f591f4_idx",
                    ),
                    models.Index(
                        fields=["outbreak_probability"],
                        name="outbreak_pr_outbrea_1c14cc_idx",
                    ),
                    models.Index(
                        fields=["prediction_period_start", "prediction_period_end"],
                        name="outbreak_pr_predict_986ccd_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="AuditLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action_type",
                    models.CharField(
                        choices=[
                            ("CREATE", "Create"),
                            ("READ", "Read"),
                            ("UPDATE", "Update"),
                            ("DELETE", "Delete"),
                            ("LOGIN", "Login"),
                            ("LOGOUT", "Logout"),
                            ("EXPORT", "Export"),
                            ("IMPORT", "Import"),
                            ("PREDICT", "Predict"),
                            ("ALERT", "Alert"),
                            ("OTHER", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                ("resource_type", models.CharField(max_length=100)),
                ("resource_id", models.CharField(blank=True, max_length=100)),
                ("action_description", models.TextField()),
                ("old_values", models.JSONField(blank=True, default=dict)),
                ("new_values", models.JSONField(blank=True, default=dict)),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField()),
                ("request_method", models.CharField(blank=True, max_length=10)),
                ("request_url", models.CharField(blank=True, max_length=500)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("session_id", models.CharField(blank=True, max_length=100)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="audit_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Audit Log",
                "verbose_name_plural": "Audit Logs",
                "db_table": "audit_logs",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["user", "timestamp"],
                        name="audit_logs_user_id_88267f_idx",
                    ),
                    models.Index(
                        fields=["action_type", "timestamp"],
                        name="audit_logs_action__11f9f1_idx",
                    ),
                    models.Index(
                        fields=["resource_type", "resource_id"],
                        name="audit_logs_resourc_bda8a6_idx",
                    ),
                ],
            },
        ),
    ]
