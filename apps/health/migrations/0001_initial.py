# Generated by Django 4.2.7 on 2025-09-28 02:04

from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("geography", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="SymptomReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("report_date", models.DateField()),
                ("symptom_type", models.CharField(max_length=100)),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("MILD", "Mild"),
                            ("MODERATE", "Moderate"),
                            ("SEVERE", "Severe"),
                        ],
                        default="MILD",
                        max_length=20,
                    ),
                ),
                ("duration_days", models.PositiveIntegerField(default=1)),
                ("affected_people_count", models.PositiveIntegerField(default=1)),
                ("description", models.TextField(blank=True)),
                ("suspected_cause", models.TextField(blank=True)),
                ("action_taken", models.TextField(blank=True)),
                ("follow_up_required", models.BooleanField(default=False)),
                (
                    "location",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                ("photos", models.JSONField(blank=True, default=list)),
                ("is_verified", models.BooleanField(default=False)),
                ("verification_notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "reporter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="symptom_reports",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "verified_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="verified_symptom_reports",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "village",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="symptom_reports",
                        to="geography.village",
                    ),
                ),
            ],
            options={
                "verbose_name": "Symptom Report",
                "verbose_name_plural": "Symptom Reports",
                "db_table": "symptom_reports",
                "ordering": ["-report_date", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PatientRecord",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("patient_id", models.CharField(max_length=50, unique=True)),
                ("first_name", models.CharField(max_length=100)),
                ("last_name", models.CharField(max_length=100)),
                ("age", models.PositiveIntegerField()),
                (
                    "gender",
                    models.CharField(
                        choices=[
                            ("MALE", "Male"),
                            ("FEMALE", "Female"),
                            ("OTHER", "Other"),
                        ],
                        max_length=10,
                    ),
                ),
                ("phone_number", models.CharField(blank=True, max_length=17)),
                ("address", models.TextField()),
                ("chief_complaint", models.TextField()),
                ("symptoms", models.JSONField(blank=True, default=list)),
                ("vital_signs", models.JSONField(blank=True, default=dict)),
                ("diagnosis", models.TextField(blank=True)),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("MILD", "Mild"),
                            ("MODERATE", "Moderate"),
                            ("SEVERE", "Severe"),
                            ("CRITICAL", "Critical"),
                        ],
                        default="MILD",
                        max_length=20,
                    ),
                ),
                ("is_water_borne", models.BooleanField(default=False)),
                ("suspected_disease", models.CharField(blank=True, max_length=100)),
                ("last_water_consumption", models.DateTimeField(blank=True, null=True)),
                ("treatment_given", models.TextField(blank=True)),
                ("medications_prescribed", models.JSONField(blank=True, default=list)),
                ("lab_tests_ordered", models.JSONField(blank=True, default=list)),
                ("lab_results", models.JSONField(blank=True, default=dict)),
                ("follow_up_required", models.BooleanField(default=False)),
                ("follow_up_date", models.DateField(blank=True, null=True)),
                ("follow_up_notes", models.TextField(blank=True)),
                ("referral_reason", models.TextField(blank=True)),
                ("referral_date", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "health_facility",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="patient_records",
                        to="geography.healthfacility",
                    ),
                ),
                (
                    "referred_to",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="referred_patients",
                        to="geography.healthfacility",
                    ),
                ),
                (
                    "registered_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="registered_patients",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "village",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="patients",
                        to="geography.village",
                    ),
                ),
                (
                    "water_source_used",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="patients",
                        to="geography.watersource",
                    ),
                ),
            ],
            options={
                "verbose_name": "Patient Record",
                "verbose_name_plural": "Patient Records",
                "db_table": "patient_records",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DiseaseCase",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("case_id", models.CharField(max_length=50, unique=True)),
                (
                    "disease_type",
                    models.CharField(
                        choices=[
                            ("CHOLERA", "Cholera"),
                            ("TYPHOID", "Typhoid"),
                            ("HEPATITIS_A", "Hepatitis A"),
                            ("DIARRHEA", "Diarrhea"),
                            ("DYSENTERY", "Dysentery"),
                            ("OTHER", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "case_status",
                    models.CharField(
                        choices=[
                            ("SUSPECTED", "Suspected"),
                            ("PROBABLE", "Probable"),
                            ("CONFIRMED", "Confirmed"),
                            ("NOT_CASE", "Not a Case"),
                        ],
                        default="SUSPECTED",
                        max_length=20,
                    ),
                ),
                ("onset_date", models.DateField()),
                ("diagnosis_date", models.DateField()),
                ("confirmation_method", models.CharField(blank=True, max_length=100)),
                ("lab_confirmation", models.BooleanField(default=False)),
                ("lab_test_type", models.CharField(blank=True, max_length=100)),
                ("lab_result", models.TextField(blank=True)),
                ("is_outbreak_related", models.BooleanField(default=False)),
                ("outbreak_id", models.CharField(blank=True, max_length=50)),
                ("exposure_source", models.TextField(blank=True)),
                ("travel_history", models.TextField(blank=True)),
                ("contact_with_cases", models.BooleanField(default=False)),
                ("contact_details", models.TextField(blank=True)),
                ("treatment_received", models.TextField(blank=True)),
                ("hospitalization_required", models.BooleanField(default=False)),
                (
                    "hospitalization_duration",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "outcome",
                    models.CharField(
                        choices=[
                            ("RECOVERED", "Recovered"),
                            ("ONGOING", "Ongoing"),
                            ("DEATH", "Death"),
                            ("UNKNOWN", "Unknown"),
                        ],
                        default="ONGOING",
                        max_length=20,
                    ),
                ),
                ("outcome_date", models.DateField(blank=True, null=True)),
                ("reporting_date", models.DateTimeField(auto_now_add=True)),
                ("verification_date", models.DateTimeField(blank=True, null=True)),
                ("verification_notes", models.TextField(blank=True)),
                ("is_public_health_alert", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "patient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="disease_cases",
                        to="health.patientrecord",
                    ),
                ),
                (
                    "reported_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reported_cases",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "verified_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="verified_cases",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Disease Case",
                "verbose_name_plural": "Disease Cases",
                "db_table": "disease_cases",
                "ordering": ["-diagnosis_date", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="HealthReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "report_type",
                    models.CharField(
                        choices=[
                            ("DAILY", "Daily Report"),
                            ("WEEKLY", "Weekly Report"),
                            ("MONTHLY", "Monthly Report"),
                            ("EMERGENCY", "Emergency Report"),
                        ],
                        default="DAILY",
                        max_length=20,
                    ),
                ),
                ("report_date", models.DateField()),
                ("total_population", models.PositiveIntegerField()),
                ("children_under_5", models.PositiveIntegerField(default=0)),
                ("pregnant_women", models.PositiveIntegerField(default=0)),
                ("elderly_above_60", models.PositiveIntegerField(default=0)),
                ("new_cases_today", models.PositiveIntegerField(default=0)),
                ("total_active_cases", models.PositiveIntegerField(default=0)),
                ("recovered_today", models.PositiveIntegerField(default=0)),
                ("deaths_today", models.PositiveIntegerField(default=0)),
                ("fever_cases", models.PositiveIntegerField(default=0)),
                ("diarrhea_cases", models.PositiveIntegerField(default=0)),
                ("vomiting_cases", models.PositiveIntegerField(default=0)),
                ("dehydration_cases", models.PositiveIntegerField(default=0)),
                ("other_symptoms", models.TextField(blank=True)),
                ("water_related_issues", models.BooleanField(default=False)),
                ("water_issue_description", models.TextField(blank=True)),
                ("sanitation_issues", models.BooleanField(default=False)),
                ("sanitation_issue_description", models.TextField(blank=True)),
                ("rainfall_today", models.FloatField(blank=True, null=True)),
                ("temperature_avg", models.FloatField(blank=True, null=True)),
                ("humidity_avg", models.FloatField(blank=True, null=True)),
                ("notes", models.TextField(blank=True)),
                ("photos", models.JSONField(blank=True, default=list)),
                (
                    "location",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("SUBMITTED", "Submitted"),
                            ("REVIEWED", "Reviewed"),
                            ("APPROVED", "Approved"),
                            ("REJECTED", "Rejected"),
                        ],
                        default="DRAFT",
                        max_length=20,
                    ),
                ),
                ("review_notes", models.TextField(blank=True)),
                ("reviewed_at", models.DateTimeField(blank=True, null=True)),
                ("is_offline_sync", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "asha_worker",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="health_reports",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "reviewed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reviewed_reports",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "village",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="health_reports",
                        to="geography.village",
                    ),
                ),
            ],
            options={
                "verbose_name": "Health Report",
                "verbose_name_plural": "Health Reports",
                "db_table": "health_reports",
                "ordering": ["-report_date", "-created_at"],
                "unique_together": {
                    ("asha_worker", "village", "report_date", "report_type")
                },
            },
        ),
        migrations.CreateModel(
            name="HealthFacilityCapacity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("report_date", models.DateField()),
                ("total_beds", models.PositiveIntegerField()),
                ("occupied_beds", models.PositiveIntegerField()),
                ("available_beds", models.PositiveIntegerField()),
                ("icu_beds", models.PositiveIntegerField(default=0)),
                ("occupied_icu_beds", models.PositiveIntegerField(default=0)),
                ("oxygen_beds", models.PositiveIntegerField(default=0)),
                ("occupied_oxygen_beds", models.PositiveIntegerField(default=0)),
                ("ventilators_available", models.PositiveIntegerField(default=0)),
                ("ventilators_in_use", models.PositiveIntegerField(default=0)),
                ("oxygen_cylinders_available", models.PositiveIntegerField(default=0)),
                ("oxygen_cylinders_in_use", models.PositiveIntegerField(default=0)),
                ("doctors_available", models.PositiveIntegerField(default=0)),
                ("nurses_available", models.PositiveIntegerField(default=0)),
                ("paramedical_staff_available", models.PositiveIntegerField(default=0)),
                ("emergency_services_available", models.BooleanField(default=True)),
                ("lab_services_available", models.BooleanField(default=True)),
                ("pharmacy_available", models.BooleanField(default=True)),
                ("ambulance_available", models.BooleanField(default=True)),
                ("notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "health_facility",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="capacity_records",
                        to="geography.healthfacility",
                    ),
                ),
                (
                    "reported_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="capacity_reports",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Health Facility Capacity",
                "verbose_name_plural": "Health Facility Capacities",
                "db_table": "health_facility_capacity",
                "ordering": ["-report_date", "-created_at"],
                "unique_together": {("health_facility", "report_date")},
            },
        ),
    ]
