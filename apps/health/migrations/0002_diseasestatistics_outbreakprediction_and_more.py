# Generated by Django 4.2.7 on 2025-09-28 06:47

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("alerts", "0002_remove_alertnotification_related_disease_case_and_more"),
        ("health", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="DiseaseStatistics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("district", models.CharField(max_length=100)),
                ("month", models.PositiveIntegerField()),
                ("year", models.PositiveIntegerField()),
                ("total_cases", models.PositiveIntegerField(default=0)),
                ("total_outbreaks", models.PositiveIntegerField(default=0)),
                ("avg_outbreak_probability", models.FloatField(default=0.0)),
                ("most_common_disease", models.CharField(max_length=50)),
                ("most_affected_age_group", models.CharField(max_length=20)),
                ("avg_water_quality_score", models.FloatField(default=0.0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Disease Statistics",
                "verbose_name_plural": "Disease Statistics",
                "db_table": "disease_statistics",
                "ordering": ["-year", "-month", "district"],
            },
        ),
        migrations.CreateModel(
            name="OutbreakPrediction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("location", models.CharField(max_length=200)),
                ("district", models.CharField(max_length=100)),
                ("prediction_date", models.DateField()),
                (
                    "predicted_outbreak_probability",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ]
                    ),
                ),
                ("predicted_case_count", models.PositiveIntegerField()),
                (
                    "confidence_score",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ]
                    ),
                ),
                ("model_version", models.CharField(max_length=50)),
                ("input_features", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Outbreak Prediction",
                "verbose_name_plural": "Outbreak Predictions",
                "db_table": "health_outbreak_predictions",
                "ordering": ["-prediction_date", "-predicted_outbreak_probability"],
            },
        ),
        migrations.CreateModel(
            name="WaterborneDiseaseData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("location", models.CharField(max_length=200)),
                ("district", models.CharField(max_length=100)),
                (
                    "water_ph",
                    models.FloatField(
                        help_text="Water pH level (0-14)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(14.0),
                        ],
                    ),
                ),
                (
                    "turbidity_ntu",
                    models.FloatField(
                        help_text="Turbidity in NTU",
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "ecoli_count_per_100ml",
                    models.FloatField(
                        help_text="E.coli count per 100ml",
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "total_coliform_count",
                    models.FloatField(
                        help_text="Total coliform count",
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "temperature_celsius",
                    models.FloatField(
                        help_text="Temperature in Celsius",
                        validators=[
                            django.core.validators.MinValueValidator(-50.0),
                            django.core.validators.MaxValueValidator(60.0),
                        ],
                    ),
                ),
                (
                    "rainfall_mm_last_7days",
                    models.FloatField(
                        help_text="Rainfall in mm in last 7 days",
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "population_density",
                    models.FloatField(
                        help_text="Population density per sq km",
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "sanitation_score",
                    models.FloatField(
                        help_text="Sanitation score (0-5)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                    ),
                ),
                (
                    "distance_to_healthcare_km",
                    models.FloatField(
                        help_text="Distance to nearest healthcare in km",
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "water_source_type",
                    models.CharField(
                        choices=[
                            ("Piped Supply", "Piped Supply"),
                            ("Bore Well", "Bore Well"),
                            ("Surface Water", "Surface Water"),
                            ("River/Stream", "River/Stream"),
                            ("Hand Pump", "Hand Pump"),
                            ("Tank", "Tank"),
                        ],
                        help_text="Type of water source",
                        max_length=50,
                    ),
                ),
                (
                    "previous_outbreak_history",
                    models.BooleanField(
                        default=False, help_text="History of previous outbreaks"
                    ),
                ),
                (
                    "is_monsoon_season",
                    models.BooleanField(
                        default=False, help_text="Whether it's monsoon season"
                    ),
                ),
                (
                    "month",
                    models.PositiveIntegerField(
                        help_text="Month (1-12)",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(12),
                        ],
                    ),
                ),
                (
                    "outbreak_occurred",
                    models.BooleanField(
                        default=False, help_text="Whether an outbreak occurred"
                    ),
                ),
                (
                    "case_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of cases reported"
                    ),
                ),
                (
                    "outbreak_probability",
                    models.FloatField(
                        help_text="Predicted outbreak probability (0-1)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "severity_level",
                    models.CharField(
                        choices=[
                            ("None", "None"),
                            ("Low", "Low"),
                            ("Medium", "Medium"),
                            ("High", "High"),
                        ],
                        default="None",
                        help_text="Severity level of the outbreak",
                        max_length=10,
                    ),
                ),
                (
                    "disease_type",
                    models.CharField(
                        choices=[
                            ("Diarrhea", "Diarrhea"),
                            ("Hepatitis A", "Hepatitis A"),
                            ("Cholera", "Cholera"),
                            ("Typhoid", "Typhoid"),
                            ("Dysentery", "Dysentery"),
                            ("None", "None"),
                        ],
                        default="None",
                        help_text="Type of disease",
                        max_length=20,
                    ),
                ),
                (
                    "age_group_affected",
                    models.CharField(
                        choices=[
                            ("Children", "Children"),
                            ("Adults", "Adults"),
                            ("Elderly", "Elderly"),
                            ("Mixed", "Mixed"),
                            ("None", "None"),
                        ],
                        default="None",
                        help_text="Age group most affected",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Waterborne Disease Data",
                "verbose_name_plural": "Waterborne Disease Data",
                "db_table": "waterborne_disease_data",
                "ordering": ["-date", "location"],
            },
        ),
        migrations.AlterUniqueTogether(
            name="healthfacilitycapacity",
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name="healthfacilitycapacity",
            name="health_facility",
        ),
        migrations.RemoveField(
            model_name="healthfacilitycapacity",
            name="reported_by",
        ),
        migrations.AlterUniqueTogether(
            name="healthreport",
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name="healthreport",
            name="asha_worker",
        ),
        migrations.RemoveField(
            model_name="healthreport",
            name="reviewed_by",
        ),
        migrations.RemoveField(
            model_name="healthreport",
            name="village",
        ),
        migrations.RemoveField(
            model_name="patientrecord",
            name="health_facility",
        ),
        migrations.RemoveField(
            model_name="patientrecord",
            name="referred_to",
        ),
        migrations.RemoveField(
            model_name="patientrecord",
            name="registered_by",
        ),
        migrations.RemoveField(
            model_name="patientrecord",
            name="village",
        ),
        migrations.RemoveField(
            model_name="patientrecord",
            name="water_source_used",
        ),
        migrations.RemoveField(
            model_name="symptomreport",
            name="reporter",
        ),
        migrations.RemoveField(
            model_name="symptomreport",
            name="verified_by",
        ),
        migrations.RemoveField(
            model_name="symptomreport",
            name="village",
        ),
        migrations.DeleteModel(
            name="DiseaseCase",
        ),
        migrations.DeleteModel(
            name="HealthFacilityCapacity",
        ),
        migrations.DeleteModel(
            name="HealthReport",
        ),
        migrations.DeleteModel(
            name="PatientRecord",
        ),
        migrations.DeleteModel(
            name="SymptomReport",
        ),
        migrations.AddIndex(
            model_name="waterbornediseasedata",
            index=models.Index(fields=["date"], name="waterborne__date_48711a_idx"),
        ),
        migrations.AddIndex(
            model_name="waterbornediseasedata",
            index=models.Index(
                fields=["district"], name="waterborne__distric_d9e812_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="waterbornediseasedata",
            index=models.Index(
                fields=["outbreak_occurred"], name="waterborne__outbrea_09a896_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="waterbornediseasedata",
            index=models.Index(
                fields=["disease_type"], name="waterborne__disease_666117_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="diseasestatistics",
            unique_together={("district", "month", "year")},
        ),
    ]
