# Generated by Django 4.2.7 on 2025-09-28 02:04

import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Block",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("code", models.CharField(max_length=10)),
                ("population", models.PositiveIntegerField(blank=True, null=True)),
                ("area_sq_km", models.FloatField(blank=True, null=True)),
                (
                    "boundary",
                    django.contrib.gis.db.models.fields.MultiPolygonField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                (
                    "centroid",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Block",
                "verbose_name_plural": "Blocks",
                "db_table": "blocks",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="GeographicBoundary",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "boundary_type",
                    models.CharField(
                        choices=[
                            ("STATE", "State"),
                            ("DISTRICT", "District"),
                            ("BLOCK", "Block"),
                            ("VILLAGE", "Village"),
                            ("HEALTH_FACILITY", "Health Facility"),
                            ("WATER_SOURCE", "Water Source"),
                            ("CUSTOM", "Custom Boundary"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "geometry",
                    django.contrib.gis.db.models.fields.GeometryField(srid=4326),
                ),
                ("properties", models.JSONField(blank=True, default=dict)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Geographic Boundary",
                "verbose_name_plural": "Geographic Boundaries",
                "db_table": "geographic_boundaries",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="State",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("code", models.CharField(max_length=10, unique=True)),
                ("population", models.PositiveIntegerField(blank=True, null=True)),
                ("area_sq_km", models.FloatField(blank=True, null=True)),
                (
                    "boundary",
                    django.contrib.gis.db.models.fields.MultiPolygonField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                (
                    "centroid",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "State",
                "verbose_name_plural": "States",
                "db_table": "states",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Village",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("code", models.CharField(max_length=10)),
                ("population", models.PositiveIntegerField(blank=True, null=True)),
                ("area_sq_km", models.FloatField(blank=True, null=True)),
                ("pincode", models.CharField(blank=True, max_length=6)),
                (
                    "boundary",
                    django.contrib.gis.db.models.fields.MultiPolygonField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                (
                    "centroid",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "block",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="villages",
                        to="geography.block",
                    ),
                ),
            ],
            options={
                "verbose_name": "Village",
                "verbose_name_plural": "Villages",
                "db_table": "villages",
                "ordering": ["name"],
                "unique_together": {("block", "name")},
            },
        ),
        migrations.CreateModel(
            name="WaterSource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "source_type",
                    models.CharField(
                        choices=[
                            ("HAND_PUMP", "Hand Pump"),
                            ("BORE_WELL", "Bore Well"),
                            ("OPEN_WELL", "Open Well"),
                            ("RIVER", "River"),
                            ("STREAM", "Stream"),
                            ("TREATMENT_PLANT", "Water Treatment Plant"),
                            ("TANKER", "Water Tanker"),
                            ("OTHER", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                ("address", models.TextField()),
                (
                    "location",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                ("depth_meters", models.FloatField(blank=True, null=True)),
                ("capacity_liters", models.PositiveIntegerField(blank=True, null=True)),
                ("is_functional", models.BooleanField(default=True)),
                ("last_maintenance", models.DateField(blank=True, null=True)),
                ("next_maintenance", models.DateField(blank=True, null=True)),
                ("is_tested", models.BooleanField(default=False)),
                ("last_test_date", models.DateField(blank=True, null=True)),
                ("next_test_date", models.DateField(blank=True, null=True)),
                ("test_frequency_days", models.PositiveIntegerField(default=30)),
                ("responsible_person", models.CharField(blank=True, max_length=100)),
                ("contact_phone", models.CharField(blank=True, max_length=17)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "village",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="water_sources",
                        to="geography.village",
                    ),
                ),
            ],
            options={
                "verbose_name": "Water Source",
                "verbose_name_plural": "Water Sources",
                "db_table": "water_sources",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="LocationHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "entity_type",
                    models.CharField(
                        choices=[
                            ("USER", "User"),
                            ("HEALTH_FACILITY", "Health Facility"),
                            ("WATER_SOURCE", "Water Source"),
                            ("AMBULANCE", "Ambulance"),
                            ("OTHER", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                ("entity_id", models.PositiveIntegerField()),
                ("location", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("accuracy", models.FloatField(blank=True, null=True)),
                ("altitude", models.FloatField(blank=True, null=True)),
                ("speed", models.FloatField(blank=True, null=True)),
                (
                    "heading",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(360),
                        ],
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
            ],
            options={
                "verbose_name": "Location History",
                "verbose_name_plural": "Location Histories",
                "db_table": "location_history",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["entity_type", "entity_id"],
                        name="location_hi_entity__2030b6_idx",
                    ),
                    models.Index(
                        fields=["timestamp"], name="location_hi_timesta_dd7c00_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="HealthFacility",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "facility_type",
                    models.CharField(
                        choices=[
                            ("PHC", "Primary Health Centre"),
                            ("CHC", "Community Health Centre"),
                            ("DH", "District Hospital"),
                            ("SH", "Sub District Hospital"),
                            ("RH", "Referral Hospital"),
                            ("CLINIC", "Private Clinic"),
                            ("DISPENSARY", "Dispensary"),
                            ("OTHER", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                ("address", models.TextField()),
                ("pincode", models.CharField(blank=True, max_length=6)),
                ("phone_number", models.CharField(blank=True, max_length=17)),
                ("email", models.EmailField(blank=True, max_length=254)),
                (
                    "location",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                ("total_beds", models.PositiveIntegerField(default=0)),
                ("icu_beds", models.PositiveIntegerField(default=0)),
                ("oxygen_beds", models.PositiveIntegerField(default=0)),
                ("ventilators", models.PositiveIntegerField(default=0)),
                ("doctors_count", models.PositiveIntegerField(default=0)),
                ("nurses_count", models.PositiveIntegerField(default=0)),
                ("paramedical_staff_count", models.PositiveIntegerField(default=0)),
                ("emergency_services", models.BooleanField(default=False)),
                ("lab_services", models.BooleanField(default=False)),
                ("xray_services", models.BooleanField(default=False)),
                ("pharmacy", models.BooleanField(default=False)),
                ("ambulance_services", models.BooleanField(default=False)),
                ("incharge_name", models.CharField(blank=True, max_length=100)),
                ("incharge_phone", models.CharField(blank=True, max_length=17)),
                ("incharge_email", models.EmailField(blank=True, max_length=254)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "village",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="health_facilities",
                        to="geography.village",
                    ),
                ),
            ],
            options={
                "verbose_name": "Health Facility",
                "verbose_name_plural": "Health Facilities",
                "db_table": "health_facilities",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="District",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("code", models.CharField(max_length=10)),
                ("population", models.PositiveIntegerField(blank=True, null=True)),
                ("area_sq_km", models.FloatField(blank=True, null=True)),
                (
                    "boundary",
                    django.contrib.gis.db.models.fields.MultiPolygonField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                (
                    "centroid",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "state",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="districts",
                        to="geography.state",
                    ),
                ),
            ],
            options={
                "verbose_name": "District",
                "verbose_name_plural": "Districts",
                "db_table": "districts",
                "ordering": ["name"],
                "unique_together": {("state", "name")},
            },
        ),
        migrations.AddField(
            model_name="block",
            name="district",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="blocks",
                to="geography.district",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="block",
            unique_together={("district", "name")},
        ),
    ]
