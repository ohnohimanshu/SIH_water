# Generated by Django 4.2.7 on 2025-09-28 02:04

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("geography", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="WaterSourceInspection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("inspection_id", models.CharField(max_length=50, unique=True)),
                (
                    "inspection_type",
                    models.CharField(
                        choices=[
                            ("ROUTINE", "Routine Inspection"),
                            ("COMPLAINT", "Complaint-based Inspection"),
                            ("EMERGENCY", "Emergency Inspection"),
                            ("FOLLOW_UP", "Follow-up Inspection"),
                        ],
                        default="ROUTINE",
                        max_length=20,
                    ),
                ),
                ("inspection_date", models.DateTimeField()),
                (
                    "inspection_status",
                    models.CharField(
                        choices=[
                            ("SCHEDULED", "Scheduled"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="SCHEDULED",
                        max_length=20,
                    ),
                ),
                (
                    "structural_condition",
                    models.CharField(
                        choices=[
                            ("EXCELLENT", "Excellent"),
                            ("GOOD", "Good"),
                            ("FAIR", "Fair"),
                            ("POOR", "Poor"),
                            ("CRITICAL", "Critical"),
                        ],
                        default="GOOD",
                        max_length=20,
                    ),
                ),
                (
                    "cleanliness_condition",
                    models.CharField(
                        choices=[
                            ("EXCELLENT", "Excellent"),
                            ("GOOD", "Good"),
                            ("FAIR", "Fair"),
                            ("POOR", "Poor"),
                            ("CRITICAL", "Critical"),
                        ],
                        default="GOOD",
                        max_length=20,
                    ),
                ),
                (
                    "water_clarity",
                    models.CharField(
                        choices=[
                            ("CLEAR", "Clear"),
                            ("SLIGHTLY_TURBID", "Slightly Turbid"),
                            ("TURBID", "Turbid"),
                            ("VERY_TURBID", "Very Turbid"),
                        ],
                        default="CLEAR",
                        max_length=20,
                    ),
                ),
                ("water_color", models.CharField(blank=True, max_length=50)),
                ("water_odor", models.CharField(blank=True, max_length=50)),
                ("water_taste", models.CharField(blank=True, max_length=50)),
                ("visible_contamination", models.BooleanField(default=False)),
                ("contamination_type", models.CharField(blank=True, max_length=100)),
                ("contamination_source", models.CharField(blank=True, max_length=100)),
                (
                    "contamination_severity",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("LOW", "Low"),
                            ("MODERATE", "Moderate"),
                            ("HIGH", "High"),
                            ("CRITICAL", "Critical"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "surrounding_condition",
                    models.CharField(
                        choices=[
                            ("EXCELLENT", "Excellent"),
                            ("GOOD", "Good"),
                            ("FAIR", "Fair"),
                            ("POOR", "Poor"),
                            ("CRITICAL", "Critical"),
                        ],
                        default="GOOD",
                        max_length=20,
                    ),
                ),
                (
                    "drainage_condition",
                    models.CharField(
                        choices=[
                            ("EXCELLENT", "Excellent"),
                            ("GOOD", "Good"),
                            ("FAIR", "Fair"),
                            ("POOR", "Poor"),
                            ("CRITICAL", "Critical"),
                        ],
                        default="GOOD",
                        max_length=20,
                    ),
                ),
                ("maintenance_required", models.BooleanField(default=False)),
                ("maintenance_type", models.CharField(blank=True, max_length=100)),
                (
                    "maintenance_priority",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("LOW", "Low"),
                            ("MEDIUM", "Medium"),
                            ("HIGH", "High"),
                            ("URGENT", "Urgent"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "inspection_duration_minutes",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("weather_conditions", models.CharField(blank=True, max_length=100)),
                ("findings", models.TextField(blank=True)),
                ("recommendations", models.TextField(blank=True)),
                ("action_required", models.BooleanField(default=False)),
                ("action_deadline", models.DateField(blank=True, null=True)),
                ("follow_up_required", models.BooleanField(default=False)),
                ("follow_up_date", models.DateField(blank=True, null=True)),
                ("follow_up_notes", models.TextField(blank=True)),
                ("photos", models.JSONField(blank=True, default=list)),
                (
                    "location",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "inspected_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="water_inspections",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "water_source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="inspections",
                        to="geography.watersource",
                    ),
                ),
            ],
            options={
                "verbose_name": "Water Source Inspection",
                "verbose_name_plural": "Water Source Inspections",
                "db_table": "water_source_inspections",
                "ordering": ["-inspection_date", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="WaterQualityTest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("test_id", models.CharField(max_length=50, unique=True)),
                (
                    "test_type",
                    models.CharField(
                        choices=[
                            ("MANUAL", "Manual Test"),
                            ("LAB", "Laboratory Test"),
                            ("FIELD", "Field Test"),
                            ("RAPID", "Rapid Test"),
                        ],
                        default="MANUAL",
                        max_length=20,
                    ),
                ),
                ("test_date", models.DateTimeField()),
                (
                    "test_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                (
                    "temperature",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "ph",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(14),
                        ],
                    ),
                ),
                (
                    "turbidity_ntu",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("color", models.CharField(blank=True, max_length=50)),
                ("odor", models.CharField(blank=True, max_length=50)),
                ("taste", models.CharField(blank=True, max_length=50)),
                (
                    "total_dissolved_solids",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "total_hardness",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "alkalinity",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "chloride",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "fluoride",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "iron",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "manganese",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "arsenic",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "lead",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "mercury",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("total_coliform", models.PositiveIntegerField(blank=True, null=True)),
                ("fecal_coliform", models.PositiveIntegerField(blank=True, null=True)),
                ("ecoli_count", models.PositiveIntegerField(blank=True, null=True)),
                ("total_bacteria", models.PositiveIntegerField(blank=True, null=True)),
                ("is_safe_for_drinking", models.BooleanField(default=True)),
                (
                    "contamination_level",
                    models.CharField(
                        choices=[
                            ("SAFE", "Safe"),
                            ("LOW_RISK", "Low Risk"),
                            ("MODERATE_RISK", "Moderate Risk"),
                            ("HIGH_RISK", "High Risk"),
                            ("UNSAFE", "Unsafe"),
                        ],
                        default="SAFE",
                        max_length=20,
                    ),
                ),
                ("test_method", models.CharField(blank=True, max_length=100)),
                ("test_equipment", models.CharField(blank=True, max_length=100)),
                (
                    "test_duration_minutes",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("notes", models.TextField(blank=True)),
                ("photos", models.JSONField(blank=True, default=list)),
                (
                    "location",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                ("verification_notes", models.TextField(blank=True)),
                ("verification_date", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "tested_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="water_tests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "verified_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="verified_water_tests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "water_source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="quality_tests",
                        to="geography.watersource",
                    ),
                ),
            ],
            options={
                "verbose_name": "Water Quality Test",
                "verbose_name_plural": "Water Quality Tests",
                "db_table": "water_quality_tests",
                "ordering": ["-test_date", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="WaterQualityAlert",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("alert_id", models.CharField(max_length=50, unique=True)),
                (
                    "alert_type",
                    models.CharField(
                        choices=[
                            ("CONTAMINATION", "Contamination Alert"),
                            ("EQUIPMENT_FAILURE", "Equipment Failure"),
                            ("MAINTENANCE_DUE", "Maintenance Due"),
                            ("TEST_FAILURE", "Test Failure"),
                            ("CRITICAL_LEVEL", "Critical Level"),
                            ("OTHER", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "alert_severity",
                    models.CharField(
                        choices=[
                            ("LOW", "Low"),
                            ("MEDIUM", "Medium"),
                            ("HIGH", "High"),
                            ("CRITICAL", "Critical"),
                        ],
                        default="MEDIUM",
                        max_length=20,
                    ),
                ),
                (
                    "alert_status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("ACKNOWLEDGED", "Acknowledged"),
                            ("RESOLVED", "Resolved"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="ACTIVE",
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("triggered_by", models.CharField(blank=True, max_length=100)),
                ("trigger_value", models.FloatField(blank=True, null=True)),
                ("threshold_value", models.FloatField(blank=True, null=True)),
                ("triggered_at", models.DateTimeField(auto_now_add=True)),
                ("acknowledged_at", models.DateTimeField(blank=True, null=True)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                ("resolution_notes", models.TextField(blank=True)),
                ("action_taken", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "acknowledged_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="acknowledged_water_alerts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_water_alerts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "related_inspection",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="alerts",
                        to="water_quality.watersourceinspection",
                    ),
                ),
                (
                    "related_test",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="water_quality_alerts",
                        to="water_quality.waterqualitytest",
                    ),
                ),
                (
                    "resolved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="resolved_water_alerts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "water_source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="quality_alerts",
                        to="geography.watersource",
                    ),
                ),
            ],
            options={
                "verbose_name": "Water Quality Alert",
                "verbose_name_plural": "Water Quality Alerts",
                "db_table": "water_quality_alerts",
                "ordering": ["-triggered_at"],
            },
        ),
        migrations.CreateModel(
            name="IoTSensorData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("sensor_id", models.CharField(max_length=50)),
                (
                    "sensor_type",
                    models.CharField(
                        choices=[
                            ("PH", "pH Sensor"),
                            ("TURBIDITY", "Turbidity Sensor"),
                            ("TEMPERATURE", "Temperature Sensor"),
                            ("CONDUCTIVITY", "Conductivity Sensor"),
                            ("CHLORINE", "Chlorine Sensor"),
                            ("FLOW", "Flow Sensor"),
                            ("PRESSURE", "Pressure Sensor"),
                            ("MULTI_PARAMETER", "Multi-parameter Sensor"),
                        ],
                        max_length=20,
                    ),
                ),
                ("timestamp", models.DateTimeField()),
                ("value", models.FloatField()),
                ("unit", models.CharField(max_length=20)),
                ("accuracy", models.FloatField(blank=True, null=True)),
                ("precision", models.FloatField(blank=True, null=True)),
                ("calibration_date", models.DateField(blank=True, null=True)),
                ("next_calibration_date", models.DateField(blank=True, null=True)),
                ("temperature", models.FloatField(blank=True, null=True)),
                ("humidity", models.FloatField(blank=True, null=True)),
                (
                    "battery_level",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("signal_strength", models.FloatField(blank=True, null=True)),
                ("is_processed", models.BooleanField(default=False)),
                ("is_anomaly", models.BooleanField(default=False)),
                ("anomaly_score", models.FloatField(blank=True, null=True)),
                ("processed_value", models.FloatField(blank=True, null=True)),
                ("raw_data", models.JSONField(blank=True, default=dict)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "water_source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sensor_data",
                        to="geography.watersource",
                    ),
                ),
            ],
            options={
                "verbose_name": "IoT Sensor Data",
                "verbose_name_plural": "IoT Sensor Data",
                "db_table": "iot_sensor_data",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["sensor_id", "timestamp"],
                        name="iot_sensor__sensor__237055_idx",
                    ),
                    models.Index(
                        fields=["water_source", "timestamp"],
                        name="iot_sensor__water_s_8229a4_idx",
                    ),
                    models.Index(
                        fields=["sensor_type", "timestamp"],
                        name="iot_sensor__sensor__6b3dd2_idx",
                    ),
                ],
            },
        ),
    ]
