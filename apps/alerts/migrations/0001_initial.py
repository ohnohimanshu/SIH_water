# Generated by Django 4.2.7 on 2025-09-28 02:04

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("geography", "0001_initial"),
        ("ml_models", "0001_initial"),
        ("water_quality", "0001_initial"),
        ("health", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="AlertRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("rule_name", models.CharField(max_length=100, unique=True)),
                (
                    "rule_type",
                    models.CharField(
                        choices=[
                            ("THRESHOLD", "Threshold Rule"),
                            ("TREND", "Trend Rule"),
                            ("PATTERN", "Pattern Rule"),
                            ("SCHEDULE", "Scheduled Rule"),
                            ("CUSTOM", "Custom Rule"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "rule_status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("INACTIVE", "Inactive"),
                            ("TESTING", "Testing"),
                        ],
                        default="ACTIVE",
                        max_length=20,
                    ),
                ),
                (
                    "alert_type",
                    models.CharField(
                        choices=[
                            ("OUTBREAK_PREDICTED", "Outbreak Predicted"),
                            ("WATER_CONTAMINATION", "Water Contamination"),
                            ("MULTIPLE_CASES", "Multiple Cases"),
                            ("SEASONAL_HIGH_RISK", "Seasonal High Risk"),
                            ("SYSTEM_FAILURE", "System Failure"),
                            ("EQUIPMENT_FAILURE", "Equipment Failure"),
                            ("DATA_QUALITY", "Data Quality Issue"),
                            ("MAINTENANCE_DUE", "Maintenance Due"),
                            ("EMERGENCY", "Emergency"),
                            ("OTHER", "Other"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "alert_severity",
                    models.CharField(
                        choices=[
                            ("LOW", "Low"),
                            ("MEDIUM", "Medium"),
                            ("HIGH", "High"),
                            ("CRITICAL", "Critical"),
                        ],
                        default="MEDIUM",
                        max_length=20,
                    ),
                ),
                ("conditions", models.JSONField(default=dict)),
                ("threshold_value", models.FloatField(blank=True, null=True)),
                (
                    "comparison_operator",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("GT", "Greater Than"),
                            ("GTE", "Greater Than or Equal"),
                            ("LT", "Less Than"),
                            ("LTE", "Less Than or Equal"),
                            ("EQ", "Equal"),
                            ("NE", "Not Equal"),
                        ],
                        max_length=10,
                    ),
                ),
                ("is_recurring", models.BooleanField(default=False)),
                (
                    "recurrence_interval",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("cooldown_period", models.PositiveIntegerField(default=60)),
                ("max_alerts_per_day", models.PositiveIntegerField(default=10)),
                ("total_triggers", models.PositiveIntegerField(default=0)),
                ("last_triggered", models.DateTimeField(blank=True, null=True)),
                (
                    "success_rate",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_rules",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "district",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="geography.district",
                    ),
                ),
                (
                    "state",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="geography.state",
                    ),
                ),
                (
                    "village",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="geography.village",
                    ),
                ),
            ],
            options={
                "verbose_name": "Alert Rule",
                "verbose_name_plural": "Alert Rules",
                "db_table": "alert_rules",
                "ordering": ["rule_name"],
            },
        ),
        migrations.CreateModel(
            name="AlertNotification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("alert_id", models.CharField(max_length=50, unique=True)),
                (
                    "alert_type",
                    models.CharField(
                        choices=[
                            ("OUTBREAK_PREDICTED", "Outbreak Predicted"),
                            ("WATER_CONTAMINATION", "Water Contamination"),
                            ("MULTIPLE_CASES", "Multiple Cases"),
                            ("SEASONAL_HIGH_RISK", "Seasonal High Risk"),
                            ("SYSTEM_FAILURE", "System Failure"),
                            ("EQUIPMENT_FAILURE", "Equipment Failure"),
                            ("DATA_QUALITY", "Data Quality Issue"),
                            ("MAINTENANCE_DUE", "Maintenance Due"),
                            ("EMERGENCY", "Emergency"),
                            ("OTHER", "Other"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "alert_severity",
                    models.CharField(
                        choices=[
                            ("LOW", "Low"),
                            ("MEDIUM", "Medium"),
                            ("HIGH", "High"),
                            ("CRITICAL", "Critical"),
                        ],
                        default="MEDIUM",
                        max_length=20,
                    ),
                ),
                (
                    "alert_status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("ACKNOWLEDGED", "Acknowledged"),
                            ("RESOLVED", "Resolved"),
                            ("CANCELLED", "Cancelled"),
                            ("ESCALATED", "Escalated"),
                        ],
                        default="ACTIVE",
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("message", models.TextField()),
                ("description", models.TextField(blank=True)),
                (
                    "location",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                ("triggered_at", models.DateTimeField(auto_now_add=True)),
                ("acknowledged_at", models.DateTimeField(blank=True, null=True)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("alert_data", models.JSONField(blank=True, default=dict)),
                ("threshold_value", models.FloatField(blank=True, null=True)),
                ("actual_value", models.FloatField(blank=True, null=True)),
                ("resolution_notes", models.TextField(blank=True)),
                ("action_taken", models.TextField(blank=True)),
                ("follow_up_required", models.BooleanField(default=False)),
                ("follow_up_date", models.DateField(blank=True, null=True)),
                ("delivery_methods", models.JSONField(blank=True, default=list)),
                ("delivery_status", models.JSONField(blank=True, default=dict)),
                ("delivery_attempts", models.PositiveIntegerField(default=0)),
                ("last_delivery_attempt", models.DateTimeField(blank=True, null=True)),
                ("is_public", models.BooleanField(default=False)),
                ("is_escalated", models.BooleanField(default=False)),
                ("escalation_level", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "acknowledged_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="acknowledged_alerts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_alerts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "district",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="alerts",
                        to="geography.district",
                    ),
                ),
                (
                    "related_disease_case",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="alerts",
                        to="health.diseasecase",
                    ),
                ),
                (
                    "related_health_report",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="alerts",
                        to="health.healthreport",
                    ),
                ),
                (
                    "related_prediction",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="alerts",
                        to="ml_models.outbreakprediction",
                    ),
                ),
                (
                    "related_water_test",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="alert_notifications",
                        to="water_quality.waterqualitytest",
                    ),
                ),
                (
                    "resolved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="resolved_alerts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "state",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="alerts",
                        to="geography.state",
                    ),
                ),
                (
                    "village",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="alerts",
                        to="geography.village",
                    ),
                ),
            ],
            options={
                "verbose_name": "Alert Notification",
                "verbose_name_plural": "Alert Notifications",
                "db_table": "alert_notifications",
                "ordering": ["-triggered_at"],
            },
        ),
        migrations.CreateModel(
            name="AlertDeliveryLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "delivery_method",
                    models.CharField(
                        choices=[
                            ("EMAIL", "Email"),
                            ("SMS", "SMS"),
                            ("WHATSAPP", "WhatsApp"),
                            ("PUSH", "Push Notification"),
                            ("DASHBOARD", "Dashboard"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "delivery_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("SENT", "Sent"),
                            ("DELIVERED", "Delivered"),
                            ("FAILED", "Failed"),
                            ("BOUNCED", "Bounced"),
                            ("UNSUBSCRIBED", "Unsubscribed"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                ("delivery_attempt", models.PositiveIntegerField(default=1)),
                ("delivery_timestamp", models.DateTimeField(auto_now_add=True)),
                ("delivery_response", models.JSONField(blank=True, default=dict)),
                ("error_message", models.TextField(blank=True)),
                ("external_id", models.CharField(blank=True, max_length=100)),
                ("external_status", models.CharField(blank=True, max_length=50)),
                ("external_response", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "alert",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="delivery_logs",
                        to="alerts.alertnotification",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="alert_deliveries",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Alert Delivery Log",
                "verbose_name_plural": "Alert Delivery Logs",
                "db_table": "alert_delivery_logs",
                "ordering": ["-delivery_timestamp"],
            },
        ),
        migrations.CreateModel(
            name="AlertTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("template_name", models.CharField(max_length=100, unique=True)),
                (
                    "alert_type",
                    models.CharField(
                        choices=[
                            ("OUTBREAK_PREDICTED", "Outbreak Predicted"),
                            ("WATER_CONTAMINATION", "Water Contamination"),
                            ("MULTIPLE_CASES", "Multiple Cases"),
                            ("SEASONAL_HIGH_RISK", "Seasonal High Risk"),
                            ("SYSTEM_FAILURE", "System Failure"),
                            ("EQUIPMENT_FAILURE", "Equipment Failure"),
                            ("DATA_QUALITY", "Data Quality Issue"),
                            ("MAINTENANCE_DUE", "Maintenance Due"),
                            ("EMERGENCY", "Emergency"),
                            ("OTHER", "Other"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "delivery_method",
                    models.CharField(
                        choices=[
                            ("EMAIL", "Email"),
                            ("SMS", "SMS"),
                            ("WHATSAPP", "WhatsApp"),
                            ("PUSH", "Push Notification"),
                            ("DASHBOARD", "Dashboard"),
                        ],
                        max_length=20,
                    ),
                ),
                ("subject_template", models.CharField(blank=True, max_length=200)),
                ("message_template", models.TextField()),
                ("description_template", models.TextField(blank=True)),
                ("available_variables", models.JSONField(blank=True, default=list)),
                ("variable_descriptions", models.JSONField(blank=True, default=dict)),
                ("is_active", models.BooleanField(default=True)),
                ("priority", models.PositiveIntegerField(default=1)),
                ("max_length", models.PositiveIntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_templates",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Alert Template",
                "verbose_name_plural": "Alert Templates",
                "db_table": "alert_templates",
                "ordering": ["alert_type", "delivery_method", "priority"],
                "unique_together": {("alert_type", "delivery_method")},
            },
        ),
        migrations.CreateModel(
            name="AlertSubscription",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "alert_type",
                    models.CharField(
                        choices=[
                            ("OUTBREAK_PREDICTED", "Outbreak Predicted"),
                            ("WATER_CONTAMINATION", "Water Contamination"),
                            ("MULTIPLE_CASES", "Multiple Cases"),
                            ("SEASONAL_HIGH_RISK", "Seasonal High Risk"),
                            ("SYSTEM_FAILURE", "System Failure"),
                            ("EQUIPMENT_FAILURE", "Equipment Failure"),
                            ("DATA_QUALITY", "Data Quality Issue"),
                            ("MAINTENANCE_DUE", "Maintenance Due"),
                            ("EMERGENCY", "Emergency"),
                            ("OTHER", "Other"),
                        ],
                        max_length=30,
                    ),
                ),
                ("delivery_methods", models.JSONField(default=list)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "min_severity",
                    models.CharField(
                        choices=[
                            ("LOW", "Low"),
                            ("MEDIUM", "Medium"),
                            ("HIGH", "High"),
                            ("CRITICAL", "Critical"),
                        ],
                        default="LOW",
                        max_length=20,
                    ),
                ),
                ("immediate_alerts", models.BooleanField(default=True)),
                ("daily_digest", models.BooleanField(default=False)),
                ("weekly_digest", models.BooleanField(default=False)),
                ("monthly_digest", models.BooleanField(default=False)),
                ("quiet_hours_start", models.TimeField(blank=True, null=True)),
                ("quiet_hours_end", models.TimeField(blank=True, null=True)),
                ("timezone", models.CharField(default="Asia/Kolkata", max_length=50)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "district",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="geography.district",
                    ),
                ),
                (
                    "state",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="geography.state",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="alert_subscriptions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "village",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="geography.village",
                    ),
                ),
            ],
            options={
                "verbose_name": "Alert Subscription",
                "verbose_name_plural": "Alert Subscriptions",
                "db_table": "alert_subscriptions",
                "unique_together": {
                    ("user", "alert_type", "state", "district", "village")
                },
            },
        ),
        migrations.AddIndex(
            model_name="alertnotification",
            index=models.Index(
                fields=["alert_type", "alert_severity"],
                name="alert_notif_alert_t_35077c_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="alertnotification",
            index=models.Index(
                fields=["alert_status", "triggered_at"],
                name="alert_notif_alert_s_84767b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="alertnotification",
            index=models.Index(
                fields=["village", "triggered_at"],
                name="alert_notif_village_f7cc39_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="alertnotification",
            index=models.Index(
                fields=["district", "triggered_at"],
                name="alert_notif_distric_acc30f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="alertnotification",
            index=models.Index(
                fields=["state", "triggered_at"], name="alert_notif_state_i_aed7e1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="alertdeliverylog",
            index=models.Index(
                fields=["alert", "user"], name="alert_deliv_alert_i_3f27c5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="alertdeliverylog",
            index=models.Index(
                fields=["delivery_method", "delivery_status"],
                name="alert_deliv_deliver_5a238a_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="alertdeliverylog",
            index=models.Index(
                fields=["delivery_timestamp"], name="alert_deliv_deliver_a2c01e_idx"
            ),
        ),
    ]
